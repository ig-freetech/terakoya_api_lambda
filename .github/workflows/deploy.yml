# name is used in Actions tab of GitHub
# https://docs.github.com/ja/actions/using-workflows/workflow-syntax-for-github-actions#name
name: Deploy Functions

# on is used to specify the event that triggers the workflow
# It's possible to specify multiple events, for example, push and pull_request
# https://docs.github.com/ja/actions/using-workflows/workflow-syntax-for-github-actions#on
on:
  # push is used to trigger the workflow when a commit is pushed to the repository branch
  # https://docs.github.com/ja/actions/using-workflows/events-that-trigger-workflows#push
  push:
    branches:
      - develop
      - master
      - 'feature/**' # Comment out this line without testing the workflow on branchs other than develop and master
    # Run actions only when changes happens in functions directory
    # https://blog.35d.jp/2020-09-29-github-actions-path
    paths:
      - "functions/**"
      - ".github/workflows/**"
      - "serverless.yml"
  workflow_dispatch:

# Can define a value as a repository variable not secret
# Can access to the value by ${{ vars.<variable_name> }} in a workflow
# https://developer.mamezou-tech.com/blogs/2023/01/16/github-actions-configuration-variables/

# env is used to set environment variables
# https://docs.github.com/ja/actions/using-workflows/workflow-syntax-for-github-actions#env
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

# jobs is used to define one or more jobs to run in parallel or sequentially
# https://docs.github.com/ja/actions/using-workflows/workflow-syntax-for-github-actions#jobs
jobs:
  # Set the arbitary name of the job
  deploy:
    # runs-on is used to specify the type of machine to run the job
    # Availlable machines are below
    # https://docs.github.com/ja/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idruns-on
    runs-on: ubuntu-latest
    # steps is used to define a sequence of tasks to be executed by the job
    # Each step is executed in a new process on runner, so the result of previous step's process is not available in the next step
    steps:
      # Set the arbitary name of the step
      # https://docs.github.com/ja/actions/using-workflows/workflow-syntax-for-github-actions#example-using-secrets
      - name: Checkout
        # uses is used to specify the action pre-defined by GitHub or a Docker container to run the step or custom action defined in the same repository
        # https://docs.github.com/ja/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsuses
        # actions/checkout is a pre-defined action to clone the source code of the repository in the runner to run the following steps
        # @v2, @v3 or @master is used to specify the version of the action. @v2 and @v3 are the major version of the action.
        # @v2 is deprecated, so @v3 is recommended
        # https://github.blog/changelog/2022-09-22-github-actions-all-actions-will-begin-running-on-node16-instead-of-node12/
        uses: actions/checkout@v3
        # actions/checkout fetch only the latest commit of the repository by default
        # https://zenn.dev/noraworld/articles/github-actions-checkout-fetch-depth
        # https://github.com/actions/checkout/issues/265#issuecomment-636597844
        with:
          fetch-depth: 0

      # Create .env file to use in serverless.yml because .env file is excluded from the repository by .gitignore and then environemnt variables are not available in serverless.yml on GitHub Actions runner
      # https://stackoverflow.com/questions/60176044/how-do-i-use-an-env-file-with-github-actions
      - name: Create .env file
        run: |
          echo "${{ secrets.ENV_FILE_CONTENTS }}" > .env

      # https://codenote.net/aws/4293.html
      # - name: Remove all resources managed by the stack via Serverless Framework
      #   uses: serverless/github-action@v3.1
      #   with:
      #     args: remove --verbose --stage ${{ github.ref_name == 'master' && 'prod' || 'dev' }}

      # Deploy the layer only when requirements.txt has changed
      # https://github.com/actions/setup-python#basic-usage
      - name: Set up Python 3.9
        # if: steps.check_requirements.outputs.SHOULD_UPDATE_LAYER == 'true'
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      # Save and restore pip packages to reduce the time to install them if requirements.txt has not changed
      # https://github.com/actions/cache#cache-action
      - name: Cache pip packages
        # if: steps.check_requirements.outputs.SHOULD_UPDATE_LAYER == 'true'
        # Note: Cache expires in 7 days
        # https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#usage-limits-and-eviction-policy
        uses: actions/cache@v3
        with:
          # path means the directory to save and restore the cache
          # ~/.cache/pip is the default directory to save packages installed by pip on Ubuntu
          # https://github.com/actions/cache/blob/main/examples.md#python---pip
          path: ~/.cache/pip
          # key is used to save and restore the cache
          # https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#using-the-cache-action
          # runner.os means the operating system of the runner
          # hashFiles('**/requirements.txt') means the hash value of requirements.txt, so the cache is restored only when requirements.txt has changed
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          # restore-keys is used to find and restore the cache when the key is not found in the cache that have been saved
          # ${{ runner.os }}-pip- must be contained in the keys that have been saved in the caches
          restore-keys: |
            ${{ runner.os }}-pip-

      # pip first checks the local cache and doesn't download packages if they are already stored in the cache directory
      # https://pip.pypa.io/en/stable/topics/caching/
      - name: Install pip packages in python directory
        # File construction of the layer after the zip file is unzipped must be /opt/python/<package> (ex: /opt/python/pydantic)
        # https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html#configuration-layers-path
        run: |
          python -m pip install --upgrade pip
          pip install -r ./functions/requirements.txt -t ./functions/layer/python

      - name: Deploy
        # https://github.com/serverless/github-action
        uses: serverless/github-action@v3.1
        with:
          # --verbose shows the log of all stack events during deployment
          # https://www.serverless.com/framework/docs/providers/aws/cli-reference/deploy#options
          args: deploy --verbose --stage ${{ github.ref_name == 'master' && 'prod' || 'dev' }}
        env:
          # Set the name of the stage to deploy based on the branch name using ternary operator
          # https://qiita.com/technote-space/items/cbeed6ddd0488499afaa
          # STAGE: ${{ github.ref_name == 'master' && 'prod' || 'dev' }}
          SLACK_ERROR_CH_WEBHOOK_URL: ${{ secrets.SLACK_ERROR_CH_WEBHOOK_URL }}
          VERIFICATION_EMAI_SUBJECT_PREFIX: ${{ github.ref_name == 'master' && '' || '[DEV] ' }}
          COGNITO_USER_POOL_ID: ${{ github.ref_name == 'master' && secrets.COGNITO_USER_POOL_ID_PROD || secrets.COGNITO_USER_POOL_ID_DEV }}
          COGNITO_USER_POOL_CLIENT_ID: ${{ github.ref_name == 'master' && secrets.COGNITO_USER_POOL_CLIENT_ID_PROD || secrets.COGNITO_USER_POOL_CLIENT_ID_DEV }}
          WEB_CLIENT_ORIGIN: ${{ github.ref_name == 'master' && 'https://terakoyaweb.com' || 'https://dev.terakoyaweb.com' }}
